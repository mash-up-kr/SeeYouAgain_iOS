// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist
{% if families %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set fontType %}{{param.name}}FontConvertible{% endset %}
import UIKit.UIFont
import SwiftUI

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length
// MARK: - Fonts
// swiftlint:disable identifier_name line_length type_body_length
{% macro transformPath path %}{% filter removeNewlines %}
    {% if param.preservePath %}
    {{path}}
    {% else %}
    {{path|basename}}
    {% endif %}
{% endfilter %}{% endmacro %}
{{accessModifier}} enum {{param.name}}FontFamily {
    {% for family in families %}
  {{accessModifier}} enum {{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% for font in family.fonts %}
    {{accessModifier}} static let {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{fontType}}(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
    {% endfor %}
    {{accessModifier}} static let all: [{{fontType}}] = [{% for font in family.fonts %}{{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{{ ", " if not forloop.last }}{% endfor %}]
  }
    {% endfor %}
  {{accessModifier}} static let allCustomFonts: [{{fontType}}] = [{% for family in families %}{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.all{{ ", " if not forloop.last }}{% endfor %}].flatMap { $0 }
  {{accessModifier}} static func registerAllCustomFonts() {
    allCustomFonts.forEach { $0.register() }
  }
}
// swiftlint:enable identifier_name line_length type_body_length
// MARK: - Implementation Details
{{accessModifier}} struct {{fontType}} {
  {{accessModifier}} let name: String
  {{accessModifier}} let family: String
  {{accessModifier}} let path: String
  {{accessModifier}} var B1: Font {
    guard let font = UIFont(font: self, size: 18) else {
      fatalError("Unable to initialize font name: '\(name)', family: \(family), size: B1")
    }
    return Font(uiFont: font)
  }
  {{accessModifier}} var B2: Font {
    guard let font = UIFont(font: self, size: 16) else {
      fatalError("Unable to initialize font name: '\(name)', family: \(family), size: B2")
    }
    return Font(uiFont: font)
  }
  {{accessModifier}} var B3: Font {
    guard let font = UIFont(font: self, size: 14) else {
      fatalError("Unable to initialize font name: '\(name)', family: \(family), size: B3")
    }
    return Font(uiFont: font)
  }
  {{accessModifier}} var C1: Font {
    guard let font = UIFont(font: self, size: 12) else {
      fatalError("Unable to initialize font name: '\(name)', family: \(family), size: C1")
    }
    return Font(uiFont: font)
  }

  {{accessModifier}} func font(size: CGFloat) -> Font {
    guard let font = UIFont(font: self, size: size) else {
      fatalError("Unable to initialize font name: '\(name)', family: \(family)")
    }
      return Font(uiFont: font)
  }
  {{accessModifier}} func register() {
  // swiftlint:disable:next conditional_returns_on_newline
  guard let url = url else { return }
  CTFontManagerRegisterFontsForURL(url as CFURL, .process, nil)
  }
  fileprivate var url: URL? {
    // swiftlint:disable:next implicit_return
    {% if param.lookupFunction %}
    return {{param.lookupFunction}}(name, family, path)
    {% else %}
    return {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil)
    {% endif %}
  }
}
{{accessModifier}} extension UIFont {
  convenience init?(font: {{fontType}}, size: CGFloat) {
    if !UIFont.fontNames(forFamilyName: font.family).contains(font.name) {
      font.register()
    }
    self.init(name: font.name, size: size)
  }
}
{{accessModifier}} extension SwiftUI.Font {
  {% for family in families %}
  static var B1Bold: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold.B1
  }
  static var B1Medium: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.medium.B1
  }
  static var B1Regular: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.regular.B1
  }
  static var B2Bold: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold.B2
  }
  static var B2Regular: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.regular.B2
  }
  static var B3Bold: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold.B3
  }
  static var C1Regular: Font {
    {{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.regular.C1
  }
  {% endfor %}
}
{% if not param.bundle and not param.lookupFunction %}
// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = {
  Bundle(for: BundleToken.self)
  }()
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No fonts found
{% endif %}
// swiftlint:enable all
// swiftformat:enable all
